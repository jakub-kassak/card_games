Card C is a pair (suit, value). C[suit] denotes the suit and C[val] denotes value of card C.

A pack P is a multiset of cards.
Hand H is a multiset of cards (subset of DC), which is assigned to a player.

Discard pile DP is a place, where players place their cards (usually face-up). The top card in DP is called TOP.
Stock ST is a list of cards, from where players draw cards (usually cards lie here face-down).

The game state is 10-tuple GS = (DP, ST, LP, LP_MC, ace, suit, val, cnt, i, mc)
    - DP - discard pile
    - ST - stock
    - LP - list of players, #LP is the number of players
    - ace - ace counter
    - suit - currently valid top suit (most of the time TOP[suit] == suit)
    - val - currently valid top value (TOP[val] == val)
    - cnt - draw count
    - i - player's index on the turn
    - mc - move counter
    - LP_MC - list, which contains the value of MC when player got rid of all cards (if a player j is still in the game LP_MC[i] == -1)

A player is uniquely identified by his position in the list of players. Each player has exactly one hand.
A rule is an implication in the form “if antecedent then consequent”. Antecedents are conditions that, when fulfilled,
trigger actions defined in consequents.
An instance of rule joined with suitable game mechanics is called move.     TODO example
A turn is player's opportunity to change game state by using exactly one move.

Players take turns in a fixed round-robin order.
Game ends, when only one player has remaining card(s) on his hand.

Game begins in a predefined initial state.
    - cards are dealt evenly to all players, so that each player has a maximum of 5 cards and at least 5 cards remain in the deck
    - one card is put on top of DP, rest of the cards remain in S
    - ace = 0, suit = TOP[suit], val = TOP[val], cnt = 1
    
Cn is a tuple of cards played during the player's turn, where 1 <= n <= 4. We can index Cn just like a regular tuple -
for example Cn[0] is the first (bottom) card in the Cn tuple. The notation Cn[val] == v is equivalent to (∀i, 0 <= i <= n): Cn[i][val] == v.

Rules:
    # match suit
    - (ace == 0 & cnt == 1 & suit == Cn[0][suit] & Cn[val] = v)    ->  put Cn into DP
    # match value
    - (ace == 0 & cnt == 1 & val == Cn[val])   -> put Cn into DP
    # over goes onto anything
    - (ace == 0 & cnt == 1 & over == Cn[val])   -> put Cn into DP
    # everything goes onto (leaves, under)
    - (val == under & suit == leaves & Cn[val] == v)   -> put Cn into DP
    # only ace can be played after an ace was played
    - (ace == k (1 <= k <= 3) & Cn[val] == ace)   -> put Cn into DP
    # (leaves, under) goes onto everything if ace wasn't played previously
    - (ace == 0 & Cn[0] == (leaves, under))   -> put Cn into DP
    # it is always possible to draw cards from stock
    - ()   ->  draw cnt cards from ST

Game mechanics (occur after the rule is applied)
    - Cn[val] == ace  ->  ace += n + 1
    - Cn[0] == (leaves, under) -> cnt = 1
    - () ->  ace = max(0, ace - 1)
    - (ace == 0 & Cn == empty)   ->   cnt = 1
    - (Cn[val] == over & c is the suit selected by the player A[i])   ->   suit = c
    - Cn[val] != over     ->   suit = Cn[suit]
    - () -> val = Cn[val]
    - Cn[val] == VII  ->  cnt = 3 * N if cnt == 1 else cnt + 3 * n
    - len(Cn) != 4  -> i = (i + 1) % #LP
    - () -> mc += 1

			